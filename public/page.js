// Generated by CoffeeScript 1.5.0
/*
# Author: Gautham Badhrinathan (gbadhrinathan@esri.com)
*/

var extend;

extend = function(obj, mixin) {
  var method, name;
  for (name in mixin) {
    method = mixin[name];
    obj[name] = method;
  }
  return obj;
};

require(["dojo/ready", "esri/map", "esri/geometry/Point", "esri/symbols/SimpleMarkerSymbol", "esri/symbols/SimpleLineSymbol", "dojo/_base/Color", "esri/graphic", "dojo/_base/connect", "esri/layers/FeatureLayer", "esri/tasks/query", "dojo/request", "dojo/parser", "dijit/layout/BorderContainer", "dijit/layout/ContentPane", "dijit/TitlePane", "esri/dijit/Attribution"], function(ready, Map, Point, SimpleMarkerSymbol, SimpleLineSymbol, Color, Graphic, connect, FeatureLayer, Query, request) {
  return ready(function() {
    var map;
    map = new Map("map", {
      center: [-56.049, 38.485],
      zoom: 3,
      basemap: "streets"
    });
    return connect.connect(map, "onLoad", function() {
      var fl;
      fl = new FeatureLayer("http://lamborghini:6080/arcgis/rest/services/l7_rowpath/MapServer/0");
      return connect.connect(fl, "onLoad", function() {
        var gfx, rec;
        gfx = null;
        (rec = function() {
          return request.get("/l7/getRowPath", {
            handleAs: "json"
          }).then(function(_arg) {
            var p1, p2, time, _ref;
            (_ref = _arg.snaps, p1 = _ref[0], p2 = _ref[1]), time = _arg.time;
            return fl.queryFeatures(extend(new Query, {
              where: "row = " + p1.row + " and path = " + p1.path
            }), function(_arg1) {
              var f1;
              f1 = _arg1.features[0];
              return fl.queryFeatures(extend(new Query, {
                where: "row = " + p2.row + " and path = " + p2.path
              }), function(_arg2) {
                var c0, c1, c2, d1, d2, f2, sbl, t0, t1, t2, v0;
                f2 = _arg2.features[0];
                c1 = f1.geometry.getExtent().getCenter();
                c2 = f2.geometry.getExtent().getCenter();
                t0 = Number(new Date(time));
                t1 = Number(new Date(p1.time));
                t2 = Number(new Date(p2.time));
                c0 = new Point({
                  x: c1.x + (c1.x - c2.x) / (t1 - t2) * (t0 - t1),
                  y: c1.y + (c1.y - c2.y) / (t1 - t2) * (t0 - t1),
                  spatialReference: c1.spatialReference
                });
                d1 = Math.abs(t1 - t0);
                d2 = Math.abs(t2 - t0);
                v0 = new Point({
                  x: (c1.x * d2 + c2.x * d1) / (d1 + d2),
                  y: (c1.y * d2 + c2.y * d1) / (d1 + d2),
                  spatialReference: c1.spatialReference
                });
                v0 = c0;
                if (gfx != null) {
                  return gfx.setGeometry(v0);
                } else {
                  sbl = new SimpleMarkerSymbol(SimpleMarkerSymbol.STYLE_CIRCLE, 20, new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, new Color([200, 50, 50]), 4), new Color([200, 200, 50, 0.6]));
                  map.centerAndZoom(v0, 3);
                  gfx = new Graphic(v0, sbl);
                  return map.graphics.add(gfx);
                }
              });
            });
          });
        })();
        return setInterval(rec, 1000);
      });
    });
  });
});
